#ifndef PARSER_H
#define PARSER_H

#include "ast.h"
#include "lexer.h"

/**
 * Структура синтаксического анализатора
 * Используем неполный тип для скрытия реализации (паттерн "Непрозрачный указатель")
 */
typedef struct parser_t parser_t;

/**
 * Создает новый синтаксический анализатор
 * @param lexer Указатель на лексический анализатор, который будет использоваться для получения лексем
 * @return Указатель на созданный синтаксический анализатор или NULL при ошибке
 */
parser_t* parser_create(lexer_t* lexer);

/**
 * Освобождает ресурсы, занятые синтаксическим анализатором
 * @param parser Указатель на синтаксический анализатор
 */
void parser_destroy(parser_t* parser);

/**
 * Разбирает выражение и строит абстрактное синтаксическое дерево
 * Это основная функция синтаксического анализатора
 * @param parser Указатель на синтаксический анализатор
 * @return Корневой узел построенного AST или NULL при ошибке разбора
 */
ast_node_t* parser_parse(parser_t* parser);

/**
 * Вспомогательная функция для разбора выражений
 * Реализует рекурсивный спуск для обработки выражений с учетом приоритетов операций
 * @param parser Указатель на синтаксический анализатор
 * @return Узел AST соответствующий выражению или NULL при ошибке разбора
 */
static ast_node_t* parse_expression(parser_t* parser);

#endif // PARSER_H