#ifndef LEXER_H
#define LEXER_H

/**
 * Типы лексем (токенов), выделяемых лексическим анализатором
 */
typedef enum {
    TOKEN_NUMBER,     // Числовая константа (например, 3.14)
    TOKEN_IDENTIFIER, // Идентификатор (имя переменной или функции)
    TOKEN_OPERATOR,   // Оператор (+, -, *, /, ^)
    TOKEN_LPAREN,     // Открывающая круглая скобка (
    TOKEN_RPAREN,     // Закрывающая круглая скобка )
    TOKEN_LBRACE,     // Открывающая фигурная скобка {
    TOKEN_RBRACE,     // Закрывающая фигурная скобка }
    TOKEN_LBRACKET,   // Открывающая квадратная скобка [
    TOKEN_RBRACKET,   // Закрывающая квадратная скобка ]
    TOKEN_EOF,        // Конец входной строки
    TOKEN_ERROR       // Ошибка лексического анализа
} token_type_t;

/**
 * Структура лексемы (токена)
 * Содержит тип лексемы и её значение в зависимости от типа
 */
typedef struct {
    token_type_t type;  // Тип лексемы
    union {
        double number;    // Значение, если лексема - число
        char* identifier; // Имя, если лексема - идентификатор
        char oper;        // Символ, если лексема - оператор
    } value;
    int position;       // Позиция лексемы во входной строке (для сообщений об ошибках)
} token_t;

/**
 * Структура лексического анализатора
 * Используем неполный тип для скрытия реализации (паттерн "Непрозрачный указатель")
 */
typedef struct lexer_t lexer_t;

/**
 * Создает новый лексический анализатор для указанной входной строки
 * @param input Входная строка для анализа
 * @return Указатель на созданный лексический анализатор или NULL при ошибке
 */
lexer_t* lexer_create(const char* input);

/**
 * Освобождает ресурсы, занятые лексическим анализатором
 * @param lexer Указатель на лексический анализатор
 */
void lexer_destroy(lexer_t* lexer);

/**
 * Извлекает следующую лексему из входной строки
 * @param lexer Указатель на лексический анализатор
 * @return Структура лексемы
 */
token_t lexer_next_token(lexer_t* lexer);

/**
 * Освобождает ресурсы, занятые лексемой (если нужно)
 * @param token Указатель на лексему
 */
void token_destroy(token_t* token);

#endif // LEXER_H